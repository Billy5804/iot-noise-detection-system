package com.billy5804.iotnoisedetectionbackend.controller;

import java.util.Collection;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.billy5804.iotnoisedetectionbackend.helper.updateHelper;
import com.billy5804.iotnoisedetectionbackend.model.Device;
import com.billy5804.iotnoisedetectionbackend.model.DeviceSensor;
import com.billy5804.iotnoisedetectionbackend.model.SiteDeviceSensorHistory;
import com.billy5804.iotnoisedetectionbackend.model.SiteDeviceSensorHistoryPK;
import com.billy5804.iotnoisedetectionbackend.projection.SiteDeviceOnlySiteProjection;
import com.billy5804.iotnoisedetectionbackend.repository.DeviceRepository;
import com.billy5804.iotnoisedetectionbackend.repository.DeviceSensorRepository;
import com.billy5804.iotnoisedetectionbackend.repository.SiteDeviceRepository;
import com.billy5804.iotnoisedetectionbackend.repository.SiteDeviceSensorHistoryRepository;

@RestController
@CrossOrigin({ "http://localhost:3000", "http://localhost:5050" })
@RequestMapping(value = "/api/v1/devices", produces = { MediaType.APPLICATION_JSON_VALUE })
public class DeviceController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private DeviceRepository deviceRepository;

	@Autowired
	private DeviceSensorRepository deviceSensorRepository;

	@Autowired
	private SiteDeviceRepository siteDeviceRepository;

	@Autowired
	private SiteDeviceSensorHistoryRepository siteDeviceSensorHistoryRepository;

	@PutMapping
	public ResponseEntity<Object> updateSite(@RequestBody Device updateDevice) {
		Device currentDevice = null;
		try {
			currentDevice = deviceRepository.findById(updateDevice.getId()).get();
		} catch (NoSuchElementException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
		}

		final Collection<DeviceSensor> updateSensors = updateDevice.getSensors();

		if (updateSensors != null && updateSensors.size() > 0) {
			try {
				final SiteDeviceOnlySiteProjection siteDeviceSite = siteDeviceRepository
						.findBySiteDevicePKDevice(currentDevice);

				updateSensors.forEach(deviceSensor -> {
					if (siteDeviceSite != null) {
						final SiteDeviceSensorHistory siteDeviceSensorHistory = new SiteDeviceSensorHistory();
						final SiteDeviceSensorHistoryPK siteDeviceSensorHistoryPK = new SiteDeviceSensorHistoryPK(
								updateDevice.getId(), deviceSensor.getId(), updateDevice.getLastBeatTime());
						siteDeviceSensorHistory.setSiteDeviceSensorHistoryPK(siteDeviceSensorHistoryPK);
						siteDeviceSensorHistory.setSite(siteDeviceSite.getSiteDevicePKSite());
						siteDeviceSensorHistory.setValue(deviceSensor.getLatestValue());
						siteDeviceSensorHistoryRepository.save(siteDeviceSensorHistory);
					}
					deviceSensorRepository.save(deviceSensor);
				});

			} catch (NoSuchElementException e) {
				updateSensors.forEach(deviceSensor -> deviceSensorRepository.save(deviceSensor));
			}
		}

		updateHelper.copyNonNullProperties(updateDevice, currentDevice);
		deviceRepository.save(currentDevice);
		return ResponseEntity.ok(null);
	}

	@PostMapping
	public void createDevice(@RequestBody Device newDevice) {
		deviceRepository.save(newDevice);
		newDevice.getSensors().forEach(deviceSensor -> deviceSensorRepository.save(deviceSensor));
	}
}
